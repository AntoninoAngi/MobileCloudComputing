# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Project(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, name: str=None, project_id: str=None, description: str=None, individual_project: bool=None, administrator: str=None, last_update: datetime=None, deadline: datetime=None, badge: str=None, keywords: List[str]=None, tasks_list: List[str]=None, attachments_list: List[str]=None, users_index: List[bool]=None):  # noqa: E501
        """Project - a model defined in Swagger

        :param creation_date: The creation_date of this Project.  # noqa: E501
        :type creation_date: datetime
        :param name: The name of this Project.  # noqa: E501
        :type name: str
        :param project_id: The project_id of this Project.  # noqa: E501
        :type project_id: str
        :param description: The description of this Project.  # noqa: E501
        :type description: str
        :param individual_project: The individual_project of this Project.  # noqa: E501
        :type individual_project: bool
        :param administrator: The administrator of this Project.  # noqa: E501
        :type administrator: str
        :param last_update: The last_update of this Project.  # noqa: E501
        :type last_update: datetime
        :param deadline: The deadline of this Project.  # noqa: E501
        :type deadline: datetime
        :param badge: The badge of this Project.  # noqa: E501
        :type badge: str
        :param keywords: The keywords of this Project.  # noqa: E501
        :type keywords: List[str]
        :param tasks_list: The tasks_list of this Project.  # noqa: E501
        :type tasks_list: List[str]
        :param attachments_list: The attachments_list of this Project.  # noqa: E501
        :type attachments_list: List[str]
        :param users_index: The users_index of this Project.  # noqa: E501
        :type users_index: List[bool]
        """
        self.swagger_types = {
            'creation_date': datetime,
            'name': str,
            'project_id': str,
            'description': str,
            'individual_project': bool,
            'administrator': str,
            'last_update': datetime,
            'deadline': datetime,
            'badge': str,
            'keywords': List[str],
            'tasks_list': List[str],
            'attachments_list': List[str],
            'users_index': List[bool]
        }

        self.attribute_map = {
            'creation_date': 'creation_date',
            'name': 'name',
            'project_id': 'project_id',
            'description': 'description',
            'individual_project': 'individual_project',
            'administrator': 'administrator',
            'last_update': 'last_update',
            'deadline': 'deadline',
            'badge': 'badge',
            'keywords': 'keywords',
            'tasks_list': 'tasks_list',
            'attachments_list': 'attachments_list',
            'users_index': 'users_index'
        }

        self._creation_date = creation_date
        self._name = name
        self._project_id = project_id
        self._description = description
        self._individual_project = individual_project
        self._administrator = administrator
        self._last_update = last_update
        self._deadline = deadline
        self._badge = badge
        self._keywords = keywords
        self._tasks_list = tasks_list
        self._attachments_list = attachments_list
        self._users_index = users_index

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self) -> datetime:
        """Gets the creation_date of this Project.


        :return: The creation_date of this Project.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: datetime):
        """Sets the creation_date of this Project.


        :param creation_date: The creation_date of this Project.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def name(self) -> str:
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project_id(self) -> str:
        """Gets the project_id of this Project.


        :return: The project_id of this Project.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this Project.


        :param project_id: The project_id of this Project.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def description(self) -> str:
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def individual_project(self) -> bool:
        """Gets the individual_project of this Project.

        true if the project is individual, false if it is collaborative  # noqa: E501

        :return: The individual_project of this Project.
        :rtype: bool
        """
        return self._individual_project

    @individual_project.setter
    def individual_project(self, individual_project: bool):
        """Sets the individual_project of this Project.

        true if the project is individual, false if it is collaborative  # noqa: E501

        :param individual_project: The individual_project of this Project.
        :type individual_project: bool
        """

        self._individual_project = individual_project

    @property
    def administrator(self) -> str:
        """Gets the administrator of this Project.


        :return: The administrator of this Project.
        :rtype: str
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator: str):
        """Sets the administrator of this Project.


        :param administrator: The administrator of this Project.
        :type administrator: str
        """

        self._administrator = administrator

    @property
    def last_update(self) -> datetime:
        """Gets the last_update of this Project.


        :return: The last_update of this Project.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update: datetime):
        """Sets the last_update of this Project.


        :param last_update: The last_update of this Project.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def deadline(self) -> datetime:
        """Gets the deadline of this Project.


        :return: The deadline of this Project.
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline: datetime):
        """Sets the deadline of this Project.


        :param deadline: The deadline of this Project.
        :type deadline: datetime
        """

        self._deadline = deadline

    @property
    def badge(self) -> str:
        """Gets the badge of this Project.

        Link to the resource in Firebase Cloud Storage  # noqa: E501

        :return: The badge of this Project.
        :rtype: str
        """
        return self._badge

    @badge.setter
    def badge(self, badge: str):
        """Sets the badge of this Project.

        Link to the resource in Firebase Cloud Storage  # noqa: E501

        :param badge: The badge of this Project.
        :type badge: str
        """

        self._badge = badge

    @property
    def keywords(self) -> List[str]:
        """Gets the keywords of this Project.


        :return: The keywords of this Project.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: List[str]):
        """Sets the keywords of this Project.


        :param keywords: The keywords of this Project.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def tasks_list(self) -> List[str]:
        """Gets the tasks_list of this Project.


        :return: The tasks_list of this Project.
        :rtype: List[str]
        """
        return self._tasks_list

    @tasks_list.setter
    def tasks_list(self, tasks_list: List[str]):
        """Sets the tasks_list of this Project.


        :param tasks_list: The tasks_list of this Project.
        :type tasks_list: List[str]
        """

        self._tasks_list = tasks_list

    @property
    def attachments_list(self) -> List[str]:
        """Gets the attachments_list of this Project.


        :return: The attachments_list of this Project.
        :rtype: List[str]
        """
        return self._attachments_list

    @attachments_list.setter
    def attachments_list(self, attachments_list: List[str]):
        """Sets the attachments_list of this Project.


        :param attachments_list: The attachments_list of this Project.
        :type attachments_list: List[str]
        """

        self._attachments_list = attachments_list

    @property
    def users_index(self) -> List[bool]:
        """Gets the users_index of this Project.

        Array of key/value pairs where keys are users names and values are booleans (always true in fact)  # noqa: E501

        :return: The users_index of this Project.
        :rtype: List[bool]
        """
        return self._users_index

    @users_index.setter
    def users_index(self, users_index: List[bool]):
        """Sets the users_index of this Project.

        Array of key/value pairs where keys are users names and values are booleans (always true in fact)  # noqa: E501

        :param users_index: The users_index of this Project.
        :type users_index: List[bool]
        """

        self._users_index = users_index
