# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, email: str=None, password: str=None, profile_image: str=None, projects_index: List[bool]=None):  # noqa: E501
        """User - a model defined in Swagger

        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param profile_image: The profile_image of this User.  # noqa: E501
        :type profile_image: str
        :param projects_index: The projects_index of this User.  # noqa: E501
        :type projects_index: List[bool]
        """
        self.swagger_types = {
            'username': str,
            'email': str,
            'password': str,
            'profile_image': str,
            'projects_index': List[bool]
        }

        self.attribute_map = {
            'username': 'username',
            'email': 'email',
            'password': 'password',
            'profile_image': 'profile_image',
            'projects_index': 'projects_index'
        }

        self._username = username
        self._email = email
        self._password = password
        self._profile_image = profile_image
        self._projects_index = projects_index

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def profile_image(self) -> str:
        """Gets the profile_image of this User.

        Link to the resource in Firebase Cloud Storage  # noqa: E501

        :return: The profile_image of this User.
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image: str):
        """Sets the profile_image of this User.

        Link to the resource in Firebase Cloud Storage  # noqa: E501

        :param profile_image: The profile_image of this User.
        :type profile_image: str
        """

        self._profile_image = profile_image

    @property
    def projects_index(self) -> List[bool]:
        """Gets the projects_index of this User.

        Array of key/value pairs where keys are projects names and values are booleans (always true in fact)  # noqa: E501

        :return: The projects_index of this User.
        :rtype: List[bool]
        """
        return self._projects_index

    @projects_index.setter
    def projects_index(self, projects_index: List[bool]):
        """Sets the projects_index of this User.

        Array of key/value pairs where keys are projects names and values are booleans (always true in fact)  # noqa: E501

        :param projects_index: The projects_index of this User.
        :type projects_index: List[bool]
        """

        self._projects_index = projects_index
